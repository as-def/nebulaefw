nebconfigbegin
ksmps,512
-B,2048
-b,512
sr,48000
nebconfigend
;- File Looping Granular Instrument
; Qu-bit Electronix
; Author: Stephen Hensley
; San Clemente, CA
; 2017
;
; Global Data from External Software
; All of the following globals are set from external software.
; Controls are named after their hardware control name.
; gilen[] - Array containing all file lengths
; gkpitch - percentage of original pitch. (Negative values allowed)
; gkspeed - percentage of original speed. (Negative values allowed)
; gkloopstart - percentage of file to start at.
; gkloopsize - percentage of post-loopstart size file to play
; gkdensity - 
; gkoverlap - 
; gkmix - percentage of granular sound (inverse percentage of dry audio file)
; gkdegrade - percentage of degradation of audio output signal
; gkfilesel - index of table containing audio file data.
; gkfreeze - binary freeze state value (0 or 1)
; gknext - trigger input for advancing files
; gkreset - trigger input for restarting phase to loopstart point.
; gksource - toggles between live input source/and usb file sources
; gkrecord - toggles record behavior
; gkrecordstate - state of the record button, independent of latching state and gate input.
; gkeol - end of sample 1 or 0 essentially high while the sample is resetting to 0.
;
; Global Tables


;giMaxRecordBuffer = 120; Max record time in seconds
giMaxRecordBuffer = 300; Max record time in seconds
giHamming   ftgen   0, 0, 8192, 20, 9, 1  
giBartlett  ftgen   0, 0, 8192, 20, 3 
giBlkHarris ftgen   0, 0, 8192, 20, 5
giGaussian  ftgen   0, 0, 8192, 20, 6
;giRectangle ftgen   0, 0, 8192, 20, 9
giRectangle ftgen   0, 0, 8192, 7, 0, 886, 0, 138, 1, 6144, 1, 138, 0
giRampUp    ftgen   0, 0, 8192, 7, 0, 7992, 1, 200, 0
giRampDown  ftgen   0, 0, 8192, 7, 0, 200, 1, 7992, 0
giWin		ftgen	0, 0, 8192, 20, 9, 1 ; Hamming Window 
giWinB		ftgen	0, 0, 8192, 20, 9, 1 ; Hamming Window 
giWinMix	ftgen	0, 0, 8192, 20, 9, 1 ; Hamming Window 
giCosine	ftgen	0, 0, 8193, 9, 1, 1, 90 ; Cosine Table
giSquare    ftgen   0, 0, 2048, 7, 1.0, 1023, 1.0, 1, 0.0
giLine10    ftgen   0, 0, 2048, 7, 0, 2048, 10.0
giLine1     ftgen   0, 0, 2048, 7, 0, 2048, 1
giPanL       ftgen   0, 0, 256, -21, 1
giPanR       ftgen   0, 0, 256, -21, 1
giPanNone   ftgen   0, 0, 256, -24, giPanL, 0.0, 0.0 ; Edited from 0.5 for non-panned partikkel
giPanAllL    ftgen   0, 0, 256, -24, giPanL, 0.0, 1.0
giPanAllR    ftgen   0, 0, 256, -24, giPanR, 0.0, 1.0
giPanMixL    ftgen   0, 0, 256, -24, giPanL, 0.0, 0.0
giPanMixR    ftgen   0, 0, 256, -24, giPanR, 0.0, 0.0
giftEmpty   ftgen   0, 0, giMaxRecordBuffer * sr, 7, 0
giftL       ftgen   0, 0, giMaxRecordBuffer * sr, 7, 0
giftR       ftgen   0, 0, giMaxRecordBuffer * sr, 7, 0
;giftL		ftgen	0, 0, -(giMaxRecordBuffer * sr), 2, 0
;giftR		ftgen	0, 0, -(giMaxRecordBuffer * sr), 2, 0

; The Following UDOs are from the Csound FLOSS Manual on recording and playing buffers
opcode BufRec1, kk, aikkkkkk ; records to a buffer
ain, ift, krec, kstart, kend, kpos, kwrap, kmode xin
setksmps 1
kstartsmps = round(kpos * sr - 1)
kwrapsmps = round(kstart * sr - 1)
kendsmps = round(kend*sr) ; end point in samples
kendsmps = (kendsmps == 0 || kendsmps > ftlen(ift) ? ftlen(ift) : kendsmps)
;kfinished = 0
knew changed krec ; 1 if record just started
if krec == 1 then
    kfinished = 0
	if knew == 1 then
		kndx = kstartsmps
	endif
	if kndx >= kendsmps - 1 && kwrap == 1 then
		kndx = kwrapsmps
	endif
	if kndx < kendsmps -1 then
		kndx = kndx + 1
		kreclength = kndx
		andx = kndx
        tabw ain, andx, ift
	else
		kfinished = 1
        kndx = kstartsmps
	endif
else
    if knew == 1 then
        kfinished = 1 ;end_recording
        kndx = kstartsmps
    endif
endif
xout kfinished, kreclength
endop

opcode BufRec2, kk, aaiikkkkkk ; records to a stereo buffer
ainL, ainR, iftL, iftR, krec, kstart, kend, kpos, kwrap, kmode xin
kfin, kreclen BufRec1 ainL, iftL, krec, kstart, kend, kpos, kwrap, kmode
kfin, kreclen BufRec1 ainR, iftR, krec, kstart, kend, kpos, kwrap, kmode
xout kfin, kreclen
endop


instr 1

if gkloopstart < 0.0015 then
gkloopstart = 0
endif
if gkloopstart > 0.995 then
gkloopstart = 1
endif
if gkloopsize < 0.0015 then
gkloopsize = 0
endif
if gkloopsize > 0.995 then
gkloopsize = 1
endif
;printks "Start: %f\tSize: %f\n", 0.25, gkloopstart, gkloopsize

tableiw 254, 1, giPanNone
tableiw 0, 0, giPanAllL
tableiw 254, 1, giPanAllL
tableiw 0, 0, giPanAllR
tableiw 254, 1, giPanAllR
tableiw 0, 0, giPanMixL
tableiw 254, 1, giPanMixL
tableiw 0, 0, giPanMixR
tableiw 254, 1, giPanMixR
krecordedbuff init giMaxRecordBuffer
kBufferEmpty init 1
kprevsize init 0
aoutl init 0
aoutr init 0
; generates right channel ftables for stereo files
gifile_right_offset = 599
itempidx = 0
loop:
    if gichn[itempidx] == 2 then
        giwoffset = itempidx + gifile_right_offset
        giwoffset ftgen (itempidx+gifile_right_offset), 0, 0, 1, gSname[itempidx], 0, 0, 2
    endif
    itempidx += 1
    if (itempidx < 100) igoto loop
kwindowsel = 0
gkfilesel_offset = 399

ainl, ainr inch 1, 2

; Set Length
if gksource == 1 then
	;klen = giMaxRecordBuffer
    kfilesr = sr
	klen = krecordedbuff / sr
    kfilelen = klen
	kglen = giMaxRecordBuffer
else
    kfilesr = gisr[gkfilesel]
    kfilelen = gilen[gkfilesel]
    kfilesamps = (kfilelen * kfilesr) * (sr / kfilesr)
    ;klen = kfilesamps / sr
	klen = kfilelen; * (kfilesr / sr); Length of Current File in seconds
	kglen = kfilesamps / sr
endif
if klen == 0 then
    klen = giMaxRecordBuffer
endif
kloopstart = (gkloopstart * 0.99) * klen
kloopscalar = (gkloopsize * 0.9999) + 0.0004
;kloopstart = 0
;kloopscalar = 1.0
if kloopscalar < 0.01 then
kloopscalar = 0.01
endif
kloopsize = ((kloopscalar * kloopscalar) * (klen-kloopstart)) * (kfilesr / sr)
if (kloopsize <= 0.000035) then
	kloopsize = 0.000035
endif

asynctrig = 0.0
ksynctrig trigger gkreset, 0.5, 0
; clear buffer
if gkrecordstate == 1 then
    if ksynctrig == 1 then ; Reset!
        tablecopy giftL, giftEmpty
        tablecopy giftR, giftEmpty
        klen = giMaxRecordBuffer
        kBufferEmpty = 1
        printf "bam! Zeroed Buffer is empty: %d\n", ksynctrig, kBufferEmpty
        kmaintainsize = 0
    endif
else
    asynctrig = a(ksynctrig)
endif
; var scaling business
;ilogmax = log(32.0)
ilogmax = log(31.92)
ilogmin = log(1.0)
kfactor = exp(gkpitch * (ilogmax - ilogmin) + ilogmin)
kpitch = 0.125 * kfactor
if kpitch <= 1.005 && kpitch >= 0.995 then
kpitch = 1.0
endif
kspeed = (gkspeed * 8.0) - 4.0
if abs(kspeed) <= 1.025 && abs(kspeed) >= 0.975 then
    if kspeed > 0 then
        kspeed = 1.0
    else
        kspeed = -1.0
    endif
endif
if (gkfreeze == 1) then
	kspeed = 0.0
endif
printks "recordstate: %d\treset: %d\tspeed: %f\tpitch: %f\tloopstart: %f\tloopsize: %f\n", 0.1, gkrecordstate, gkreset, kspeed, kpitch, gkloopstart, gkloopsize


; Set phs of playback for mincer and partikkel
kphasorfreq = ((1 / kloopsize) * kspeed)
if kphasorfreq > sr then
kphasorfreq = sr
endif
aphs, aphssync syncphasor kphasorfreq, asynctrig
atime = kloopstart + (kloopsize * aphs)
;amtime = atime * (sr / kfilesr)
agphs = atime / (kglen * (kfilesr / sr))
;agphs = aphs

;printks "real length: %f\tnew length: %f\tkphasorfreq: %f\tkloopsize: %f\n", 0.25, kfilelen,kglen, kphasorfreq, kloopsize
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Begin Recording Chunk ;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if kBufferEmpty == 1 then
    krecstart = 0
    krecend = giMaxRecordBuffer
else
    if gkrecord == 0 then
        krecwrap = kloopstart
        krecstart = k(agphs)
        krecend = kloopsize + kloopstart
    endif
endif
if gkrecord_alt == 0 then
    arecL = aoutl * 1.3
    arecR = aoutr * 1.3
else
    arecL = ainl
    arecR = ainr
endif
;kfin, kbuffsize BufRec2, arecL, arecR, giftL, giftR, gkrecord, krecwrap, krecend, krecstart, 1, 0
kfin, kbuffsize BufRec2, arecL, arecR, giftL, giftR, gkrecord, krecwrap, krecend, krecstart, 1, 0
kfinchanged trigger kfin, 0.5, 0
if kfinchanged == 1 then
    asynctrig = 1
    if kmaintainsize == 1 then
        krecordedbuff = kprevsize
    else
        kprevsize = kbuffsize
        krecordedbuff = kbuffsize
    endif 
    kmaintainsize = 1
    kBufferEmpty = 0
endif
;printks "Fin: %f\tEmpty: %f\tBuff Size: %f\tPrevBuff Size: %f\tStartTime: %f\tEndTime: %f\n", 2.0, kfin, kBufferEmpty, krecordedbuff, kprevsize, krecstart, krecend
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; End Recording Chunk ;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ktrig metro kr
;if gkrecord == 0 then 
;    if gksource == 0 || kBufferEmpty == 0 then
;        gkeol max_k aphssync, ktrig, 2
;    endif
;endif

if kphasorfreq > 50 then
    gksizestatus = 1
else
    gksizestatus = 0
endif
kphssync max_k aphssync, ktrig, 2
if kphssync == 1 then
    gkeol = 1
endif
; Window Shape
kwindowsel = int(gkdegrade * 7)
kwindowblend = gkdegrade * 7
kwindowchanged changed kwindowsel
if kwindowchanged == 1 then
    if kwindowsel < 1  then
        tablecopy giWin, giRectangle
        tablecopy giWinB, giHamming
    elseif kwindowsel < 2 then
        tablecopy giWin, giHamming
        tablecopy giWinB, giRampUp
    elseif kwindowsel < 3 then
        tablecopy giWin, giRampUp
        tablecopy giWinB, giBartlett
    elseif kwindowsel < 4 then
        tablecopy giWin, giBartlett
        tablecopy giWinB, giRampDown
    elseif kwindowsel < 5 then
        tablecopy giWin, giRampDown
        tablecopy giWinB, giBlkHarris
    elseif kwindowsel < 6 then
        tablecopy giWin, giBlkHarris
        tablecopy giWinB, giGaussian
    elseif kwindowsel < 7 then
        tablecopy giWin, giGaussian
    endif
endif

; Window Blend
kwblend = kwindowblend - kwindowsel
tablemix giWinMix, 0, 8192, giWin, 0, 1.0-kwblend, giWinB, 0, kwblend


; Prep Pan table
kpanamount = gkloopsize_alt 
kpanchanged changed kpanamount
if kpanchanged == 1 then
    tablemix giPanMixL, 0, 256, giPanNone, 0, 1.0-kpanamount, giPanAllL, 0, kpanamount
    tablemix giPanMixR, 0, 256, giPanNone, 0, 1.0-kpanamount, giPanAllR, 0, kpanamount
    tablew 0, 0, giPanMixL
    tablew 254, 1, giPanMixL
    tablew 0, 0, giPanMixR
    tablew 254, 1, giPanMixR
endif

; Random Pitch
krandpitchamt = gkloopstart_alt
krndpitchmod rand (krandpitchamt * 1200)


; Set A lot of parameters for Partikkel
;kranddist = gkdensity * 15
;if kranddist < 0.3 then
;kranddist = 0.0
;endif
;ilogmaxgfreq = log(1500.0)
ilogmaxgfreq = log(2500.0)
;ilogmingfreq = log(0.25)
ilogmingfreq = log(0.1667)
kgrainfreq = exp(gkdensity * (ilogmaxgfreq - ilogmingfreq) + ilogmingfreq)
kgrainsize = (gkoverlap) * (((1 / kgrainfreq) * 2.0) * 1000) + 1
;kgrainfreq	= 8; 4 grains per second
kdistribution	= gkdensity_alt * 100; periodic grain distribution
idisttab	= giLine10 ; (default) flat distribution used for grain distribution
async		= 0				; no sync input
kenv2amt	= 1				; entirely secondary enveloping
ienv2tab	= giWinMix		; default secondary envelope (flat)
;ienv2tab	= giBlkHarris; default secondary envelope (flat)
ienv_attack	= -1 ;			; default attack envelope (flat)
ienv_decay	= -1 ;			; default decay envelope (flat)
ksustain_amount	= .5 ; time (in fraction of grain dur) at sustain level for each grain
ka_d_ratio	= 0.5 			; balance between attack and decay time
kduration	= kgrainsize	; set grain duration relative to grain rate
iamp		= 0.45		; amp
igainmasks	= -1			; (default) no gain masking
ksweepshape	= 0				; shape of frequency sweep (0=no sweep)
iwavfreqstarttab = -1		; frequency sweep start table
iwavfreqendtab	= -1		; frequency sweep end table
ifmamptab	= -1			; default FM scaling (=1)
kfmenv		= giWin		; default FM envelope (flat)
icosine		= giCosine		; cosine ftable
kTrainCps	= 1				; grain rate for single-cycle trainlet in each grain
knumpartials	= 1			; number of partials in trainlet
kchroma		= 1				; balance of partials in trainlet
krandommask	= 0				; no random grain masking
iwaveamptab	= -1			; mix of all 4 sourcve waveforms and no amp for trainlets
;; random range
;klow = k(agphs) - 0.05
;khigh = k(agphs) + 0.05
asamplepos1 = agphs
asamplepos2 = agphs
asamplepos3 = agphs
asamplepos4 = agphs ;random klow, khigh
kwavekey1	= 1				; original key for source waveform
kwavekey2	= 1 
kwavekey3	= 1 
kwavekey4	= 1 
imax_grains	= 25			; max grains per k period

kphaselock = 0
ifftsize = 2048
idecim = 16

; Actual Instrument Handling


; Input to Mincer
if gksource == 1 then
    kwavfreq	= ((1/kglen)*kpitch) * cent(krndpitchmod); fundamental frequency of source waveform
    awavfm = 0
    asigL mincer atime, 1.0, kpitch, giftL, kphaselock, ifftsize, idecim 
    asigR mincer atime, 1.0, kpitch, giftR, kphaselock, ifftsize, idecim
    agrainLL, agrainLR partikkel kgrainfreq, kdistribution, idisttab, async, kenv2amt, ienv2tab, \
            ienv_attack, ienv_decay, ksustain_amount, ka_d_ratio, kduration, iamp, igainmasks, \
            kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, \
            ifmamptab, kfmenv, icosine, kTrainCps, knumpartials, \
            kchroma, giPanMixL, krandommask, giftL, giftL, giftL, giftL, \
            iwaveamptab, asamplepos1, asamplepos2, asamplepos3, asamplepos4, \
            kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains 

    agrainRL, agrainRR partikkel kgrainfreq, kdistribution, idisttab, async, kenv2amt, ienv2tab, \
            ienv_attack, ienv_decay, ksustain_amount, ka_d_ratio, kduration, iamp, igainmasks, \
            kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, \
            ifmamptab, kfmenv, icosine, kTrainCps, knumpartials, \
            kchroma, giPanMixR, krandommask, giftR, giftR, giftR, giftR, \
            iwaveamptab, asamplepos1, asamplepos2, asamplepos3, asamplepos4, \
            kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains 

    agrainL = agrainLL + agrainRR
    agrainR = agrainRL + agrainLR
    if kBufferEmpty == 1 then
        agrainL = 0
        agrainR = 0
        asigL = 0
        asigR = 0
    endif
else
    knumchn = gichn[gkfilesel]
    kwavfreq    = ((1/klen)*kpitch) * cent(krndpitchmod);
    kwaveformL = gkfilesel_offset + gkfilesel + 1
    if knumchn > 1 then 
        kwaveformR = gifile_right_offset + gkfilesel
    else
        kwaveformR = kwaveformL
    endif 
    if gksource_alt == 1 then
        awavfml    	= ainl
        awavfmr    	= ainr
    else
        awavfml     = 0
        awavfm     = 0
    endif
    kchn = gichn[gkfilesel]
    kfileL = gkfilesel_offset + gkfilesel + 1
    if kchn > 1 then 
        kfileR = gifile_right_offset + gkfilesel
    else
        kfileR = kfileL
    endif
    asigL mincer atime, 0.8, kpitch * (kfilesr / sr), kfileL, kphaselock, ifftsize, idecim
    asigR mincer atime, 0.8, kpitch * (kfilesr / sr), kfileR, kphaselock, ifftsize, idecim
    agrainLL, agrainLR partikkel kgrainfreq, kdistribution, idisttab, async, kenv2amt, ienv2tab, \
            ienv_attack, ienv_decay, ksustain_amount, ka_d_ratio, kduration, iamp, igainmasks, \
            kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfml, \
            ifmamptab, kfmenv, icosine, kTrainCps, knumpartials, \
            kchroma, giPanMixL, krandommask, kwaveformL, kwaveformL, kwaveformL, kwaveformL, \
            iwaveamptab, asamplepos1, asamplepos2, asamplepos3, asamplepos4, \
            kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains, 1

    async2 partikkelsync, 1

    agrainRL, agrainRR partikkel kgrainfreq, kdistribution, idisttab, async2, kenv2amt, ienv2tab, \
            ienv_attack, ienv_decay, ksustain_amount, ka_d_ratio, kduration, iamp, igainmasks, \
            kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfmr, \
            ifmamptab, kfmenv, icosine, kTrainCps, knumpartials, \
            kchroma, giPanMixR, krandommask, kwaveformR, kwaveformR, kwaveformR, kwaveformR, \
            iwaveamptab, asamplepos1, asamplepos2, asamplepos3, asamplepos4, \
            kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains 
    agrainL = agrainLL + agrainRR
    agrainR = agrainRL + agrainLR
endif


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; mix control ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if gkmix < 0.01 then
gkmix = 0.0
elseif gkmix > 0.99 then
gkmix = 1.0
endif
if gksource == 1 then
    kdrylevel = 1 - abs(1 -(2 * gkmix))
    kmincerlevel = 1 - (2 * gkmix)
    kpartikkellevel = (2 * gkmix) - 1
    if kdrylevel > 1 then
        kdrylevel = 1  
    elseif kdrylevel < 0 then
        kdrylevel = 0
    endif
    if kmincerlevel > 1 then
        kmincerlevel = 1  
    elseif kmincerlevel < 0 then
        kmincerlevel = 0
    endif
    if kpartikkellevel > 1 then
        kpartikkellevel = 1  
    elseif kpartikkellevel < 0 then
        kpartikkellevel = 0
    endif

    amixl = (ainl * kdrylevel) + (asigL * kmincerlevel) + (agrainL * kpartikkellevel)
    amixr = (ainr * kdrylevel) + (asigR * kmincerlevel) + (agrainR * kpartikkellevel)
    aoutl = amixl
    aoutr = amixr
else
    amixl = ((agrainL * gkmix) + (asigL * (1.0 - gkmix))) * (gkdegrade_alt * 2.0)
    amixr = ((agrainR * gkmix) + (asigR * (1.0 - gkmix))) * (gkdegrade_alt * 2.0)
    aoutl = amixl
    aoutr = amixr
endif

outs aoutl, aoutr ; output

endin

